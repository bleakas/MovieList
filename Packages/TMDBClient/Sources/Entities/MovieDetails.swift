// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct MovieDetails: Codable {
    public var id: Int
    public var posterPath: String?
    public var title: String
    public var overview: String
    public var genres: [Genre]?
    public var credits: Credits?

    public struct Genre: Codable {
        public var id: Int
        public var name: String

        public init(id: Int, name: String) {
            self.id = id
            self.name = name
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.id = try values.decode(Int.self, forKey: "id")
            self.name = try values.decode(String.self, forKey: "name")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(id, forKey: "id")
            try values.encode(name, forKey: "name")
        }
    }

    public struct Credits: Codable {
        public var cast: [CastItem]?

        public struct CastItem: Codable {
            public var id: Int
            public var name: String

            public init(id: Int, name: String) {
                self.id = id
                self.name = name
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.id = try values.decode(Int.self, forKey: "id")
                self.name = try values.decode(String.self, forKey: "name")
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(id, forKey: "id")
                try values.encode(name, forKey: "name")
            }
        }

        public init(cast: [CastItem]? = nil) {
            self.cast = cast
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.cast = try values.decodeIfPresent([CastItem].self, forKey: "cast")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(cast, forKey: "cast")
        }
    }

    public init(id: Int, posterPath: String? = nil, title: String, overview: String, genres: [Genre]? = nil, credits: Credits? = nil) {
        self.id = id
        self.posterPath = posterPath
        self.title = title
        self.overview = overview
        self.genres = genres
        self.credits = credits
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decode(Int.self, forKey: "id")
        self.posterPath = try values.decodeIfPresent(String.self, forKey: "poster_Path")
        self.title = try values.decode(String.self, forKey: "title")
        self.overview = try values.decode(String.self, forKey: "overview")
        self.genres = try values.decodeIfPresent([Genre].self, forKey: "genres")
        self.credits = try values.decodeIfPresent(Credits.self, forKey: "credits")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(id, forKey: "id")
        try values.encodeIfPresent(posterPath, forKey: "poster_Path")
        try values.encode(title, forKey: "title")
        try values.encode(overview, forKey: "overview")
        try values.encodeIfPresent(genres, forKey: "genres")
        try values.encodeIfPresent(credits, forKey: "credits")
    }
}
